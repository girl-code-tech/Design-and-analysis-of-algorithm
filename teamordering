\*Team ordering You have the results of a completed round-robin tournament in which n
teams played each other once. Each game ended either with a victory for one of the
teams or with a tie. Design an algorithm that lists the teams in a sequence so that every
team did not lose the game with the team listed immediately after it.*\




// Java implementation to find the 
// order of the teams in a round 
// robin tournament such that every 
// team has won against to its next team 

import java.util.*; 
import java.lang.*; 

// A class to represent result 
// of a match of a tournament. 
class Result { 
	int winner; 
	int loser; 

	Result(int winner, int loser) 
	{ 
		this.winner = winner; 
		this.loser = loser; 
	} 
} 

public class TeamOrdering { 

	// Function to arrange the teams of 
	// the round-robin tournament 
	static void arrangeTeams(int[] teams, 
							Result[] results) 
	{ 
		HashMap<Integer, 
				List<Integer> > 
			map = new HashMap<>(); 
		int winner = 0; 

		// Creating a hashmap of teams 
		// and the opponents against 
		// which they have won, using 
		// the results of the tournament 
		for (int i = 0; i < results.length; i++) { 
			winner = results[i].winner; 
			if (map.containsKey(winner)) { 
				map.get(winner).add( 
					results[i].loser); 
			} 
			else { 
				List<Integer> list 
					= new ArrayList<Integer>(); 
				list.add(results[i].loser); 
				map.put(winner, list); 
			} 
		} 
		List<Integer> output = new ArrayList<>(); 

		// Arrange the teams in required order 
		setInOrder(teams, map, teams.length, output); 
		Iterator<Integer> it = output.iterator(); 

		// Displaying the final output 
		while (it.hasNext()) { 
			System.out.print(it.next()); 
			System.out.print(" "); 
		} 
	} 

	// Function to determine 
	// the order of teams 
	static void setInOrder( 
		int[] teams, 
		HashMap<Integer, List<Integer> > map, 
		int n, List<Integer> output) 
	{ 
		// Base Cases 
		if (n < 1) { 
			return; 
		} 
		// If there is only 1 team, 
		// add it to the output 
		else if (n == 1) { 
			output.add(teams[n - 1]); 
			return; 
		} 

		// Recursive call to generate 
		// output for N-1 teams 
		setInOrder(teams, map, n - 1, output); 
		int key = teams[n - 1]; 
		int i; 

		// Finding the position for the 
		// current team in the output list. 
		for (i = 0; i < output.size(); i++) { 

			// Obtain the team at current 
			// index in the list 
			int team = output.get(i); 

			// Check if it has lost against 
			// current team 
			List<Integer> losers = map.get(key); 
			if (losers.indexOf(team) != -1) 
				break; 
		} 
		// Add the current team 
		// to its final position 
		output.add(i, key); 
	} 

	// Driver Code 
	public static void main(String[] args) 
	{ 
		int[] teams = { 1, 2, 3, 4 }; 
		Result[] results = { 
			new Result(1, 4), 
			new Result(4, 3), 
			new Result(1, 3), 
			new Result(1, 2), 
			new Result(2, 3), 
			new Result(3, 2), 
			new Result(2, 4) 
		}; 

		// Function Call 
		arrangeTeams(teams, results); 
	} 
} 
